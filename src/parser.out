

Unused terminals:


Grammar

Rule 1     program -> program classDecl
Rule 2     program -> empty
Rule 3     classDecl -> CLASS ID extendsIdOp LKEY listFieldOrMethDecl RKEY
Rule 4     extendsIdOp -> EXTENDS ID
Rule 5     extendsIdOp -> empty
Rule 6     listFieldOrMethDecl -> listFieldOrMethDecl fieldOrMethDecl
Rule 7     listFieldOrMethDecl -> empty
Rule 8     fieldOrMethDecl -> fieldDecl
Rule 9     fieldOrMethDecl -> methDecl
Rule 10    fieldDecl -> type ID COMMA ID listId DOTCOMMA
Rule 11    listId -> COMMA ID listId
Rule 12    listId -> empty
Rule 13    methDecl -> type ID LPAR formals RPAR block
Rule 14    formals -> type ID COMMA type ID listTypeId
Rule 15    formals -> empty
Rule 16    listTypeId -> COMMA type ID listTypeId
Rule 17    listTypeId -> empty
Rule 18    type -> INT
Rule 19    type -> BOOLEAN
Rule 20    type -> STRING
Rule 21    type -> type ID
Rule 22    type -> type LCOR RCOR
Rule 23    block -> LKEY varDecl listVarDecl stmt listStmt RKEY
Rule 24    listVarDecl -> listVarDecl varDecl
Rule 25    listVarDecl -> empty
Rule 26    listStmt -> listStmt stmt
Rule 27    listStmt -> empty
Rule 28    varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA
Rule 29    equalExprOp -> IGUAL expr
Rule 30    equalExprOp -> empty
Rule 31    listIdEqExprOp -> listIdEqExprOp COMMA ID equalExprOp
Rule 32    listIdEqExprOp -> empty
Rule 33    stmt -> assign DOTCOMMA
Rule 34    stmt -> call DOTCOMMA
Rule 35    stmt -> RETURN exprOp DOTCOMMA
Rule 36    stmt -> IF LPAR expr RPAR stmt elseStmtOp
Rule 37    stmt -> WHILE LPAR expr RPAR stmt
Rule 38    stmt -> breakOrContinue DOTCOMMA
Rule 39    stmt -> block
Rule 40    exprOp -> expr
Rule 41    exprOp -> empty
Rule 42    elseStmtOp -> ELSE
Rule 43    elseStmtOp -> stmt
Rule 44    breakOrContinue -> BREAK
Rule 45    breakOrContinue -> CONTINUE
Rule 46    assign -> location IGUAL expr
Rule 47    location -> ID
Rule 48    location -> expr DOT ID
Rule 49    location -> expr LCOR expr RCOR
Rule 50    call -> method LPAR actuals RPAR
Rule 51    method -> ID
Rule 52    method -> expr DOT ID
Rule 53    actuals -> expr COMMA expr listExpr
Rule 54    actuals -> empty
Rule 55    listExpr -> COMMA expr listExpr
Rule 56    listExpr -> empty
Rule 57    expr -> location
Rule 58    expr -> expr SUM expr
Rule 59    expr -> expr MEN expr
Rule 60    expr -> expr MULT expr
Rule 61    expr -> expr DIV expr
Rule 62    expr -> expr MOD expr
Rule 63    expr -> expr ILOGICO expr
Rule 64    expr -> expr OLOGICO expr
Rule 65    expr -> expr MENORQUE expr
Rule 66    expr -> expr MENORIGUAL expr
Rule 67    expr -> expr MAYORQUE expr
Rule 68    expr -> expr MAYORIGUAL expr
Rule 69    expr -> expr IGUALIGUAL expr
Rule 70    expr -> expr DIFERENTE expr
Rule 71    expr -> call
Rule 72    expr -> THIS
Rule 73    expr -> NEW ID LPAR RPAR
Rule 74    expr -> NEW type LCOR expr RCOR
Rule 75    expr -> expr DOT LENGTH
Rule 76    expr -> UMINUS expr
Rule 77    expr -> NEGBOOL expr
Rule 78    expr -> literal
Rule 79    expr -> LPAR expr RPAR
Rule 80    literal -> NUMERO
Rule 81    literal -> CAD
Rule 82    literal -> TRUE
Rule 83    literal -> FALSE
Rule 84    literal -> NULL
Rule 85    empty -> <empty>

Terminals, with rules where they appear

BOOLEAN              : 19
BREAK                : 44
CAD                  : 81
CLASS                : 3
COMMA                : 10 11 14 16 28 31 53 55
CONTINUE             : 45
DIFERENTE            : 70
DIV                  : 61
DOT                  : 48 52 75
DOTCOMMA             : 10 28 33 34 35 38
ELSE                 : 42
EXTENDS              : 4
FALSE                : 83
ID                   : 3 4 10 10 11 13 14 14 16 21 28 28 31 47 48 51 52 73
IF                   : 36
IGUAL                : 29 46
IGUALIGUAL           : 69
ILOGICO              : 63
INT                  : 18
LCOR                 : 22 49 74
LENGTH               : 75
LKEY                 : 3 23
LPAR                 : 13 36 37 50 73 79
MAYORIGUAL           : 68
MAYORQUE             : 67
MEN                  : 59
MENORIGUAL           : 66
MENORQUE             : 65
MOD                  : 62
MULT                 : 60
NEGBOOL              : 77
NEW                  : 73 74
NULL                 : 84
NUMERO               : 80
OLOGICO              : 64
RCOR                 : 22 49 74
RETURN               : 35
RKEY                 : 3 23
RPAR                 : 13 36 37 50 73 79
STRING               : 20
SUM                  : 58
THIS                 : 72
TRUE                 : 82
UMINUS               : 76
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

actuals              : 50
assign               : 33
block                : 13 39
breakOrContinue      : 38
call                 : 34 71
classDecl            : 1
elseStmtOp           : 36
empty                : 2 5 7 12 15 17 25 27 30 32 41 54 56
equalExprOp          : 28 28 31
expr                 : 29 36 37 40 46 48 49 49 52 53 53 55 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 74 75 76 77 79
exprOp               : 35
extendsIdOp          : 3
fieldDecl            : 8
fieldOrMethDecl      : 6
formals              : 13
listExpr             : 53 55
listFieldOrMethDecl  : 3 6
listId               : 10 11
listIdEqExprOp       : 28 31
listStmt             : 23 26
listTypeId           : 14 16
listVarDecl          : 23 24
literal              : 78
location             : 46 57
methDecl             : 9
method               : 50
program              : 1 0
stmt                 : 23 26 36 37 43
type                 : 10 13 14 14 16 21 22 28 74
varDecl              : 23 24


Parsing method: LALR


state 0

    (0) S' -> . program
    (1) program -> . program classDecl
    (2) program -> . empty
    (85) empty -> .

    CLASS           reduce using rule 85 (empty -> .)
    $end            reduce using rule 85 (empty -> .)


    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . classDecl
    (3) classDecl -> . CLASS ID extendsIdOp LKEY listFieldOrMethDecl RKEY

    CLASS           shift and go to state 4


    classDecl                      shift and go to state 3

state 2

    (2) program -> empty .

    CLASS           reduce using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)



state 3

    (1) program -> program classDecl .

    CLASS           reduce using rule 1 (program -> program classDecl .)
    $end            reduce using rule 1 (program -> program classDecl .)



state 4

    (3) classDecl -> CLASS . ID extendsIdOp LKEY listFieldOrMethDecl RKEY

    ID              shift and go to state 5



state 5

    (3) classDecl -> CLASS ID . extendsIdOp LKEY listFieldOrMethDecl RKEY
    (4) extendsIdOp -> . EXTENDS ID
    (5) extendsIdOp -> . empty
    (85) empty -> .

    EXTENDS         shift and go to state 7
    LKEY            reduce using rule 85 (empty -> .)


    extendsIdOp                    shift and go to state 6
    empty                          shift and go to state 8

state 6

    (3) classDecl -> CLASS ID extendsIdOp . LKEY listFieldOrMethDecl RKEY

    LKEY            shift and go to state 9



state 7

    (4) extendsIdOp -> EXTENDS . ID

    ID              shift and go to state 10



state 8

    (5) extendsIdOp -> empty .

    LKEY            reduce using rule 5 (extendsIdOp -> empty .)



state 9

    (3) classDecl -> CLASS ID extendsIdOp LKEY . listFieldOrMethDecl RKEY
    (6) listFieldOrMethDecl -> . listFieldOrMethDecl fieldOrMethDecl
    (7) listFieldOrMethDecl -> . empty
    (85) empty -> .

    RKEY            reduce using rule 85 (empty -> .)
    INT             reduce using rule 85 (empty -> .)
    BOOLEAN         reduce using rule 85 (empty -> .)
    STRING          reduce using rule 85 (empty -> .)


    empty                          shift and go to state 12
    listFieldOrMethDecl            shift and go to state 11

state 10

    (4) extendsIdOp -> EXTENDS ID .

    LKEY            reduce using rule 4 (extendsIdOp -> EXTENDS ID .)



state 11

    (3) classDecl -> CLASS ID extendsIdOp LKEY listFieldOrMethDecl . RKEY
    (6) listFieldOrMethDecl -> listFieldOrMethDecl . fieldOrMethDecl
    (8) fieldOrMethDecl -> . fieldDecl
    (9) fieldOrMethDecl -> . methDecl
    (10) fieldDecl -> . type ID COMMA ID listId DOTCOMMA
    (13) methDecl -> . type ID LPAR formals RPAR block
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR

    RKEY            shift and go to state 18
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14


    fieldDecl                      shift and go to state 17
    fieldOrMethDecl                shift and go to state 13
    type                           shift and go to state 15
    methDecl                       shift and go to state 16

state 12

    (7) listFieldOrMethDecl -> empty .

    RKEY            reduce using rule 7 (listFieldOrMethDecl -> empty .)
    INT             reduce using rule 7 (listFieldOrMethDecl -> empty .)
    BOOLEAN         reduce using rule 7 (listFieldOrMethDecl -> empty .)
    STRING          reduce using rule 7 (listFieldOrMethDecl -> empty .)



state 13

    (6) listFieldOrMethDecl -> listFieldOrMethDecl fieldOrMethDecl .

    RKEY            reduce using rule 6 (listFieldOrMethDecl -> listFieldOrMethDecl fieldOrMethDecl .)
    INT             reduce using rule 6 (listFieldOrMethDecl -> listFieldOrMethDecl fieldOrMethDecl .)
    BOOLEAN         reduce using rule 6 (listFieldOrMethDecl -> listFieldOrMethDecl fieldOrMethDecl .)
    STRING          reduce using rule 6 (listFieldOrMethDecl -> listFieldOrMethDecl fieldOrMethDecl .)



state 14

    (20) type -> STRING .

    ID              reduce using rule 20 (type -> STRING .)
    LCOR            reduce using rule 20 (type -> STRING .)



state 15

    (10) fieldDecl -> type . ID COMMA ID listId DOTCOMMA
    (13) methDecl -> type . ID LPAR formals RPAR block
    (21) type -> type . ID
    (22) type -> type . LCOR RCOR

    ID              shift and go to state 22
    LCOR            shift and go to state 21



state 16

    (9) fieldOrMethDecl -> methDecl .

    RKEY            reduce using rule 9 (fieldOrMethDecl -> methDecl .)
    INT             reduce using rule 9 (fieldOrMethDecl -> methDecl .)
    BOOLEAN         reduce using rule 9 (fieldOrMethDecl -> methDecl .)
    STRING          reduce using rule 9 (fieldOrMethDecl -> methDecl .)



state 17

    (8) fieldOrMethDecl -> fieldDecl .

    RKEY            reduce using rule 8 (fieldOrMethDecl -> fieldDecl .)
    INT             reduce using rule 8 (fieldOrMethDecl -> fieldDecl .)
    BOOLEAN         reduce using rule 8 (fieldOrMethDecl -> fieldDecl .)
    STRING          reduce using rule 8 (fieldOrMethDecl -> fieldDecl .)



state 18

    (3) classDecl -> CLASS ID extendsIdOp LKEY listFieldOrMethDecl RKEY .

    CLASS           reduce using rule 3 (classDecl -> CLASS ID extendsIdOp LKEY listFieldOrMethDecl RKEY .)
    $end            reduce using rule 3 (classDecl -> CLASS ID extendsIdOp LKEY listFieldOrMethDecl RKEY .)



state 19

    (18) type -> INT .

    ID              reduce using rule 18 (type -> INT .)
    LCOR            reduce using rule 18 (type -> INT .)



state 20

    (19) type -> BOOLEAN .

    ID              reduce using rule 19 (type -> BOOLEAN .)
    LCOR            reduce using rule 19 (type -> BOOLEAN .)



state 21

    (22) type -> type LCOR . RCOR

    RCOR            shift and go to state 23



state 22

    (10) fieldDecl -> type ID . COMMA ID listId DOTCOMMA
    (13) methDecl -> type ID . LPAR formals RPAR block
    (21) type -> type ID .

    COMMA           shift and go to state 25
    LPAR            shift and go to state 24
    ID              reduce using rule 21 (type -> type ID .)
    LCOR            reduce using rule 21 (type -> type ID .)



state 23

    (22) type -> type LCOR RCOR .

    ID              reduce using rule 22 (type -> type LCOR RCOR .)
    LCOR            reduce using rule 22 (type -> type LCOR RCOR .)



state 24

    (13) methDecl -> type ID LPAR . formals RPAR block
    (14) formals -> . type ID COMMA type ID listTypeId
    (15) formals -> . empty
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR
    (85) empty -> .

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14
    RPAR            reduce using rule 85 (empty -> .)


    empty                          shift and go to state 26
    type                           shift and go to state 27
    formals                        shift and go to state 28

state 25

    (10) fieldDecl -> type ID COMMA . ID listId DOTCOMMA

    ID              shift and go to state 29



state 26

    (15) formals -> empty .

    RPAR            reduce using rule 15 (formals -> empty .)



state 27

    (14) formals -> type . ID COMMA type ID listTypeId
    (21) type -> type . ID
    (22) type -> type . LCOR RCOR

    ID              shift and go to state 30
    LCOR            shift and go to state 21



state 28

    (13) methDecl -> type ID LPAR formals . RPAR block

    RPAR            shift and go to state 31



state 29

    (10) fieldDecl -> type ID COMMA ID . listId DOTCOMMA
    (11) listId -> . COMMA ID listId
    (12) listId -> . empty
    (85) empty -> .

    COMMA           shift and go to state 33
    DOTCOMMA        reduce using rule 85 (empty -> .)


    listId                         shift and go to state 32
    empty                          shift and go to state 34

state 30

    (14) formals -> type ID . COMMA type ID listTypeId
    (21) type -> type ID .

    COMMA           shift and go to state 35
    ID              reduce using rule 21 (type -> type ID .)
    LCOR            reduce using rule 21 (type -> type ID .)



state 31

    (13) methDecl -> type ID LPAR formals RPAR . block
    (23) block -> . LKEY varDecl listVarDecl stmt listStmt RKEY

    LKEY            shift and go to state 36


    block                          shift and go to state 37

state 32

    (10) fieldDecl -> type ID COMMA ID listId . DOTCOMMA

    DOTCOMMA        shift and go to state 38



state 33

    (11) listId -> COMMA . ID listId

    ID              shift and go to state 39



state 34

    (12) listId -> empty .

    DOTCOMMA        reduce using rule 12 (listId -> empty .)



state 35

    (14) formals -> type ID COMMA . type ID listTypeId
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14


    type                           shift and go to state 40

state 36

    (23) block -> LKEY . varDecl listVarDecl stmt listStmt RKEY
    (28) varDecl -> . type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14


    varDecl                        shift and go to state 41
    type                           shift and go to state 42

state 37

    (13) methDecl -> type ID LPAR formals RPAR block .

    RKEY            reduce using rule 13 (methDecl -> type ID LPAR formals RPAR block .)
    INT             reduce using rule 13 (methDecl -> type ID LPAR formals RPAR block .)
    BOOLEAN         reduce using rule 13 (methDecl -> type ID LPAR formals RPAR block .)
    STRING          reduce using rule 13 (methDecl -> type ID LPAR formals RPAR block .)



state 38

    (10) fieldDecl -> type ID COMMA ID listId DOTCOMMA .

    RKEY            reduce using rule 10 (fieldDecl -> type ID COMMA ID listId DOTCOMMA .)
    INT             reduce using rule 10 (fieldDecl -> type ID COMMA ID listId DOTCOMMA .)
    BOOLEAN         reduce using rule 10 (fieldDecl -> type ID COMMA ID listId DOTCOMMA .)
    STRING          reduce using rule 10 (fieldDecl -> type ID COMMA ID listId DOTCOMMA .)



state 39

    (11) listId -> COMMA ID . listId
    (11) listId -> . COMMA ID listId
    (12) listId -> . empty
    (85) empty -> .

    COMMA           shift and go to state 33
    DOTCOMMA        reduce using rule 85 (empty -> .)


    listId                         shift and go to state 43
    empty                          shift and go to state 34

state 40

    (14) formals -> type ID COMMA type . ID listTypeId
    (21) type -> type . ID
    (22) type -> type . LCOR RCOR

    ID              shift and go to state 44
    LCOR            shift and go to state 21



state 41

    (23) block -> LKEY varDecl . listVarDecl stmt listStmt RKEY
    (24) listVarDecl -> . listVarDecl varDecl
    (25) listVarDecl -> . empty
    (85) empty -> .

    RETURN          reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    CONTINUE        reduce using rule 85 (empty -> .)
    LKEY            reduce using rule 85 (empty -> .)
    INT             reduce using rule 85 (empty -> .)
    BOOLEAN         reduce using rule 85 (empty -> .)
    STRING          reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    THIS            reduce using rule 85 (empty -> .)
    NEW             reduce using rule 85 (empty -> .)
    UMINUS          reduce using rule 85 (empty -> .)
    NEGBOOL         reduce using rule 85 (empty -> .)
    LPAR            reduce using rule 85 (empty -> .)
    NUMERO          reduce using rule 85 (empty -> .)
    CAD             reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)
    NULL            reduce using rule 85 (empty -> .)


    listVarDecl                    shift and go to state 45
    empty                          shift and go to state 46

state 42

    (28) varDecl -> type . ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA
    (21) type -> type . ID
    (22) type -> type . LCOR RCOR

    ID              shift and go to state 47
    LCOR            shift and go to state 21



state 43

    (11) listId -> COMMA ID listId .

    DOTCOMMA        reduce using rule 11 (listId -> COMMA ID listId .)



state 44

    (14) formals -> type ID COMMA type ID . listTypeId
    (21) type -> type ID .
    (16) listTypeId -> . COMMA type ID listTypeId
    (17) listTypeId -> . empty
    (85) empty -> .

    ID              reduce using rule 21 (type -> type ID .)
    LCOR            reduce using rule 21 (type -> type ID .)
    COMMA           shift and go to state 48
    RPAR            reduce using rule 85 (empty -> .)


    listTypeId                     shift and go to state 50
    empty                          shift and go to state 49

state 45

    (23) block -> LKEY varDecl listVarDecl . stmt listStmt RKEY
    (24) listVarDecl -> listVarDecl . varDecl
    (33) stmt -> . assign DOTCOMMA
    (34) stmt -> . call DOTCOMMA
    (35) stmt -> . RETURN exprOp DOTCOMMA
    (36) stmt -> . IF LPAR expr RPAR stmt elseStmtOp
    (37) stmt -> . WHILE LPAR expr RPAR stmt
    (38) stmt -> . breakOrContinue DOTCOMMA
    (39) stmt -> . block
    (28) varDecl -> . type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA
    (46) assign -> . location IGUAL expr
    (50) call -> . method LPAR actuals RPAR
    (44) breakOrContinue -> . BREAK
    (45) breakOrContinue -> . CONTINUE
    (23) block -> . LKEY varDecl listVarDecl stmt listStmt RKEY
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (51) method -> . ID
    (52) method -> . expr DOT ID
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL

    RETURN          shift and go to state 52
    IF              shift and go to state 68
    WHILE           shift and go to state 53
    BREAK           shift and go to state 72
    CONTINUE        shift and go to state 74
    LKEY            shift and go to state 36
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14
    ID              shift and go to state 67
    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    breakOrContinue                shift and go to state 61
    expr                           shift and go to state 71
    varDecl                        shift and go to state 64
    literal                        shift and go to state 58
    stmt                           shift and go to state 65
    method                         shift and go to state 63
    call                           shift and go to state 59
    type                           shift and go to state 42
    assign                         shift and go to state 75
    block                          shift and go to state 76
    location                       shift and go to state 60

state 46

    (25) listVarDecl -> empty .

    RETURN          reduce using rule 25 (listVarDecl -> empty .)
    IF              reduce using rule 25 (listVarDecl -> empty .)
    WHILE           reduce using rule 25 (listVarDecl -> empty .)
    BREAK           reduce using rule 25 (listVarDecl -> empty .)
    CONTINUE        reduce using rule 25 (listVarDecl -> empty .)
    LKEY            reduce using rule 25 (listVarDecl -> empty .)
    INT             reduce using rule 25 (listVarDecl -> empty .)
    BOOLEAN         reduce using rule 25 (listVarDecl -> empty .)
    STRING          reduce using rule 25 (listVarDecl -> empty .)
    ID              reduce using rule 25 (listVarDecl -> empty .)
    THIS            reduce using rule 25 (listVarDecl -> empty .)
    NEW             reduce using rule 25 (listVarDecl -> empty .)
    UMINUS          reduce using rule 25 (listVarDecl -> empty .)
    NEGBOOL         reduce using rule 25 (listVarDecl -> empty .)
    LPAR            reduce using rule 25 (listVarDecl -> empty .)
    NUMERO          reduce using rule 25 (listVarDecl -> empty .)
    CAD             reduce using rule 25 (listVarDecl -> empty .)
    TRUE            reduce using rule 25 (listVarDecl -> empty .)
    FALSE           reduce using rule 25 (listVarDecl -> empty .)
    NULL            reduce using rule 25 (listVarDecl -> empty .)



state 47

    (28) varDecl -> type ID . equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA
    (21) type -> type ID .
    (29) equalExprOp -> . IGUAL expr
    (30) equalExprOp -> . empty
    (85) empty -> .

    ID              reduce using rule 21 (type -> type ID .)
    LCOR            reduce using rule 21 (type -> type ID .)
    IGUAL           shift and go to state 77
    COMMA           reduce using rule 85 (empty -> .)


    equalExprOp                    shift and go to state 78
    empty                          shift and go to state 79

state 48

    (16) listTypeId -> COMMA . type ID listTypeId
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14


    type                           shift and go to state 80

state 49

    (17) listTypeId -> empty .

    RPAR            reduce using rule 17 (listTypeId -> empty .)



state 50

    (14) formals -> type ID COMMA type ID listTypeId .

    RPAR            reduce using rule 14 (formals -> type ID COMMA type ID listTypeId .)



state 51

    (79) expr -> LPAR . expr RPAR
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 83
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 52

    (35) stmt -> RETURN . exprOp DOTCOMMA
    (40) exprOp -> . expr
    (41) exprOp -> . empty
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (85) empty -> .
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    DOTCOMMA        reduce using rule 85 (empty -> .)
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 86
    exprOp                         shift and go to state 84
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63
    empty                          shift and go to state 85

state 53

    (37) stmt -> WHILE . LPAR expr RPAR stmt

    LPAR            shift and go to state 87



state 54

    (77) expr -> NEGBOOL . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 88
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 55

    (73) expr -> NEW . ID LPAR RPAR
    (74) expr -> NEW . type LCOR expr RCOR
    (18) type -> . INT
    (19) type -> . BOOLEAN
    (20) type -> . STRING
    (21) type -> . type ID
    (22) type -> . type LCOR RCOR

    ID              shift and go to state 90
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 14


    type                           shift and go to state 89

state 56

    (84) literal -> NULL .

    SUM             reduce using rule 84 (literal -> NULL .)
    MEN             reduce using rule 84 (literal -> NULL .)
    MULT            reduce using rule 84 (literal -> NULL .)
    DIV             reduce using rule 84 (literal -> NULL .)
    MOD             reduce using rule 84 (literal -> NULL .)
    ILOGICO         reduce using rule 84 (literal -> NULL .)
    OLOGICO         reduce using rule 84 (literal -> NULL .)
    MENORQUE        reduce using rule 84 (literal -> NULL .)
    MENORIGUAL      reduce using rule 84 (literal -> NULL .)
    MAYORQUE        reduce using rule 84 (literal -> NULL .)
    MAYORIGUAL      reduce using rule 84 (literal -> NULL .)
    IGUALIGUAL      reduce using rule 84 (literal -> NULL .)
    DIFERENTE       reduce using rule 84 (literal -> NULL .)
    DOT             reduce using rule 84 (literal -> NULL .)
    LCOR            reduce using rule 84 (literal -> NULL .)
    RPAR            reduce using rule 84 (literal -> NULL .)
    DOTCOMMA        reduce using rule 84 (literal -> NULL .)
    COMMA           reduce using rule 84 (literal -> NULL .)
    RCOR            reduce using rule 84 (literal -> NULL .)



state 57

    (82) literal -> TRUE .

    SUM             reduce using rule 82 (literal -> TRUE .)
    MEN             reduce using rule 82 (literal -> TRUE .)
    MULT            reduce using rule 82 (literal -> TRUE .)
    DIV             reduce using rule 82 (literal -> TRUE .)
    MOD             reduce using rule 82 (literal -> TRUE .)
    ILOGICO         reduce using rule 82 (literal -> TRUE .)
    OLOGICO         reduce using rule 82 (literal -> TRUE .)
    MENORQUE        reduce using rule 82 (literal -> TRUE .)
    MENORIGUAL      reduce using rule 82 (literal -> TRUE .)
    MAYORQUE        reduce using rule 82 (literal -> TRUE .)
    MAYORIGUAL      reduce using rule 82 (literal -> TRUE .)
    IGUALIGUAL      reduce using rule 82 (literal -> TRUE .)
    DIFERENTE       reduce using rule 82 (literal -> TRUE .)
    DOT             reduce using rule 82 (literal -> TRUE .)
    LCOR            reduce using rule 82 (literal -> TRUE .)
    RPAR            reduce using rule 82 (literal -> TRUE .)
    DOTCOMMA        reduce using rule 82 (literal -> TRUE .)
    COMMA           reduce using rule 82 (literal -> TRUE .)
    RCOR            reduce using rule 82 (literal -> TRUE .)



state 58

    (78) expr -> literal .

    COMMA           reduce using rule 78 (expr -> literal .)
    SUM             reduce using rule 78 (expr -> literal .)
    MEN             reduce using rule 78 (expr -> literal .)
    MULT            reduce using rule 78 (expr -> literal .)
    DIV             reduce using rule 78 (expr -> literal .)
    MOD             reduce using rule 78 (expr -> literal .)
    ILOGICO         reduce using rule 78 (expr -> literal .)
    OLOGICO         reduce using rule 78 (expr -> literal .)
    MENORQUE        reduce using rule 78 (expr -> literal .)
    MENORIGUAL      reduce using rule 78 (expr -> literal .)
    MAYORQUE        reduce using rule 78 (expr -> literal .)
    MAYORIGUAL      reduce using rule 78 (expr -> literal .)
    IGUALIGUAL      reduce using rule 78 (expr -> literal .)
    DIFERENTE       reduce using rule 78 (expr -> literal .)
    DOT             reduce using rule 78 (expr -> literal .)
    LCOR            reduce using rule 78 (expr -> literal .)
    DOTCOMMA        reduce using rule 78 (expr -> literal .)
    RPAR            reduce using rule 78 (expr -> literal .)
    RCOR            reduce using rule 78 (expr -> literal .)



state 59

    (34) stmt -> call . DOTCOMMA
    (71) expr -> call .

    DOTCOMMA        shift and go to state 91
    DOT             reduce using rule 71 (expr -> call .)
    LCOR            reduce using rule 71 (expr -> call .)
    SUM             reduce using rule 71 (expr -> call .)
    MEN             reduce using rule 71 (expr -> call .)
    MULT            reduce using rule 71 (expr -> call .)
    DIV             reduce using rule 71 (expr -> call .)
    MOD             reduce using rule 71 (expr -> call .)
    ILOGICO         reduce using rule 71 (expr -> call .)
    OLOGICO         reduce using rule 71 (expr -> call .)
    MENORQUE        reduce using rule 71 (expr -> call .)
    MENORIGUAL      reduce using rule 71 (expr -> call .)
    MAYORQUE        reduce using rule 71 (expr -> call .)
    MAYORIGUAL      reduce using rule 71 (expr -> call .)
    IGUALIGUAL      reduce using rule 71 (expr -> call .)
    DIFERENTE       reduce using rule 71 (expr -> call .)



state 60

    (46) assign -> location . IGUAL expr
    (57) expr -> location .

    IGUAL           shift and go to state 92
    DOT             reduce using rule 57 (expr -> location .)
    LCOR            reduce using rule 57 (expr -> location .)
    SUM             reduce using rule 57 (expr -> location .)
    MEN             reduce using rule 57 (expr -> location .)
    MULT            reduce using rule 57 (expr -> location .)
    DIV             reduce using rule 57 (expr -> location .)
    MOD             reduce using rule 57 (expr -> location .)
    ILOGICO         reduce using rule 57 (expr -> location .)
    OLOGICO         reduce using rule 57 (expr -> location .)
    MENORQUE        reduce using rule 57 (expr -> location .)
    MENORIGUAL      reduce using rule 57 (expr -> location .)
    MAYORQUE        reduce using rule 57 (expr -> location .)
    MAYORIGUAL      reduce using rule 57 (expr -> location .)
    IGUALIGUAL      reduce using rule 57 (expr -> location .)
    DIFERENTE       reduce using rule 57 (expr -> location .)



state 61

    (38) stmt -> breakOrContinue . DOTCOMMA

    DOTCOMMA        shift and go to state 93



state 62

    (81) literal -> CAD .

    SUM             reduce using rule 81 (literal -> CAD .)
    MEN             reduce using rule 81 (literal -> CAD .)
    MULT            reduce using rule 81 (literal -> CAD .)
    DIV             reduce using rule 81 (literal -> CAD .)
    MOD             reduce using rule 81 (literal -> CAD .)
    ILOGICO         reduce using rule 81 (literal -> CAD .)
    OLOGICO         reduce using rule 81 (literal -> CAD .)
    MENORQUE        reduce using rule 81 (literal -> CAD .)
    MENORIGUAL      reduce using rule 81 (literal -> CAD .)
    MAYORQUE        reduce using rule 81 (literal -> CAD .)
    MAYORIGUAL      reduce using rule 81 (literal -> CAD .)
    IGUALIGUAL      reduce using rule 81 (literal -> CAD .)
    DIFERENTE       reduce using rule 81 (literal -> CAD .)
    DOT             reduce using rule 81 (literal -> CAD .)
    LCOR            reduce using rule 81 (literal -> CAD .)
    RPAR            reduce using rule 81 (literal -> CAD .)
    DOTCOMMA        reduce using rule 81 (literal -> CAD .)
    COMMA           reduce using rule 81 (literal -> CAD .)
    RCOR            reduce using rule 81 (literal -> CAD .)



state 63

    (50) call -> method . LPAR actuals RPAR

    LPAR            shift and go to state 94



state 64

    (24) listVarDecl -> listVarDecl varDecl .

    RETURN          reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    IF              reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    WHILE           reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    BREAK           reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    CONTINUE        reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    LKEY            reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    INT             reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    BOOLEAN         reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    STRING          reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    ID              reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    THIS            reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    NEW             reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    UMINUS          reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    NEGBOOL         reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    LPAR            reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    NUMERO          reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    CAD             reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    TRUE            reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    FALSE           reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)
    NULL            reduce using rule 24 (listVarDecl -> listVarDecl varDecl .)



state 65

    (23) block -> LKEY varDecl listVarDecl stmt . listStmt RKEY
    (26) listStmt -> . listStmt stmt
    (27) listStmt -> . empty
    (85) empty -> .

    RKEY            reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    CONTINUE        reduce using rule 85 (empty -> .)
    LKEY            reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    THIS            reduce using rule 85 (empty -> .)
    NEW             reduce using rule 85 (empty -> .)
    UMINUS          reduce using rule 85 (empty -> .)
    NEGBOOL         reduce using rule 85 (empty -> .)
    LPAR            reduce using rule 85 (empty -> .)
    NUMERO          reduce using rule 85 (empty -> .)
    CAD             reduce using rule 85 (empty -> .)
    TRUE            reduce using rule 85 (empty -> .)
    FALSE           reduce using rule 85 (empty -> .)
    NULL            reduce using rule 85 (empty -> .)


    listStmt                       shift and go to state 95
    empty                          shift and go to state 96

state 66

    (80) literal -> NUMERO .

    SUM             reduce using rule 80 (literal -> NUMERO .)
    MEN             reduce using rule 80 (literal -> NUMERO .)
    MULT            reduce using rule 80 (literal -> NUMERO .)
    DIV             reduce using rule 80 (literal -> NUMERO .)
    MOD             reduce using rule 80 (literal -> NUMERO .)
    ILOGICO         reduce using rule 80 (literal -> NUMERO .)
    OLOGICO         reduce using rule 80 (literal -> NUMERO .)
    MENORQUE        reduce using rule 80 (literal -> NUMERO .)
    MENORIGUAL      reduce using rule 80 (literal -> NUMERO .)
    MAYORQUE        reduce using rule 80 (literal -> NUMERO .)
    MAYORIGUAL      reduce using rule 80 (literal -> NUMERO .)
    IGUALIGUAL      reduce using rule 80 (literal -> NUMERO .)
    DIFERENTE       reduce using rule 80 (literal -> NUMERO .)
    DOT             reduce using rule 80 (literal -> NUMERO .)
    LCOR            reduce using rule 80 (literal -> NUMERO .)
    RPAR            reduce using rule 80 (literal -> NUMERO .)
    DOTCOMMA        reduce using rule 80 (literal -> NUMERO .)
    COMMA           reduce using rule 80 (literal -> NUMERO .)
    RCOR            reduce using rule 80 (literal -> NUMERO .)



state 67

    (47) location -> ID .
    (51) method -> ID .

    COMMA           reduce using rule 47 (location -> ID .)
    SUM             reduce using rule 47 (location -> ID .)
    MEN             reduce using rule 47 (location -> ID .)
    MULT            reduce using rule 47 (location -> ID .)
    DIV             reduce using rule 47 (location -> ID .)
    MOD             reduce using rule 47 (location -> ID .)
    ILOGICO         reduce using rule 47 (location -> ID .)
    OLOGICO         reduce using rule 47 (location -> ID .)
    MENORQUE        reduce using rule 47 (location -> ID .)
    MENORIGUAL      reduce using rule 47 (location -> ID .)
    MAYORQUE        reduce using rule 47 (location -> ID .)
    MAYORIGUAL      reduce using rule 47 (location -> ID .)
    IGUALIGUAL      reduce using rule 47 (location -> ID .)
    DIFERENTE       reduce using rule 47 (location -> ID .)
    DOT             reduce using rule 47 (location -> ID .)
    LCOR            reduce using rule 47 (location -> ID .)
    RPAR            reduce using rule 47 (location -> ID .)
    DOTCOMMA        reduce using rule 47 (location -> ID .)
    RCOR            reduce using rule 47 (location -> ID .)
    IGUAL           reduce using rule 47 (location -> ID .)
    LPAR            reduce using rule 51 (method -> ID .)



state 68

    (36) stmt -> IF . LPAR expr RPAR stmt elseStmtOp

    LPAR            shift and go to state 97



state 69

    (83) literal -> FALSE .

    SUM             reduce using rule 83 (literal -> FALSE .)
    MEN             reduce using rule 83 (literal -> FALSE .)
    MULT            reduce using rule 83 (literal -> FALSE .)
    DIV             reduce using rule 83 (literal -> FALSE .)
    MOD             reduce using rule 83 (literal -> FALSE .)
    ILOGICO         reduce using rule 83 (literal -> FALSE .)
    OLOGICO         reduce using rule 83 (literal -> FALSE .)
    MENORQUE        reduce using rule 83 (literal -> FALSE .)
    MENORIGUAL      reduce using rule 83 (literal -> FALSE .)
    MAYORQUE        reduce using rule 83 (literal -> FALSE .)
    MAYORIGUAL      reduce using rule 83 (literal -> FALSE .)
    IGUALIGUAL      reduce using rule 83 (literal -> FALSE .)
    DIFERENTE       reduce using rule 83 (literal -> FALSE .)
    DOT             reduce using rule 83 (literal -> FALSE .)
    LCOR            reduce using rule 83 (literal -> FALSE .)
    RPAR            reduce using rule 83 (literal -> FALSE .)
    DOTCOMMA        reduce using rule 83 (literal -> FALSE .)
    COMMA           reduce using rule 83 (literal -> FALSE .)
    RCOR            reduce using rule 83 (literal -> FALSE .)



state 70

    (76) expr -> UMINUS . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 98
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 71

    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH

    DOT             shift and go to state 112
    LCOR            shift and go to state 109
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103



state 72

    (44) breakOrContinue -> BREAK .

    DOTCOMMA        reduce using rule 44 (breakOrContinue -> BREAK .)



state 73

    (72) expr -> THIS .

    COMMA           reduce using rule 72 (expr -> THIS .)
    SUM             reduce using rule 72 (expr -> THIS .)
    MEN             reduce using rule 72 (expr -> THIS .)
    MULT            reduce using rule 72 (expr -> THIS .)
    DIV             reduce using rule 72 (expr -> THIS .)
    MOD             reduce using rule 72 (expr -> THIS .)
    ILOGICO         reduce using rule 72 (expr -> THIS .)
    OLOGICO         reduce using rule 72 (expr -> THIS .)
    MENORQUE        reduce using rule 72 (expr -> THIS .)
    MENORIGUAL      reduce using rule 72 (expr -> THIS .)
    MAYORQUE        reduce using rule 72 (expr -> THIS .)
    MAYORIGUAL      reduce using rule 72 (expr -> THIS .)
    IGUALIGUAL      reduce using rule 72 (expr -> THIS .)
    DIFERENTE       reduce using rule 72 (expr -> THIS .)
    DOT             reduce using rule 72 (expr -> THIS .)
    LCOR            reduce using rule 72 (expr -> THIS .)
    DOTCOMMA        reduce using rule 72 (expr -> THIS .)
    RPAR            reduce using rule 72 (expr -> THIS .)
    RCOR            reduce using rule 72 (expr -> THIS .)



state 74

    (45) breakOrContinue -> CONTINUE .

    DOTCOMMA        reduce using rule 45 (breakOrContinue -> CONTINUE .)



state 75

    (33) stmt -> assign . DOTCOMMA

    DOTCOMMA        shift and go to state 114



state 76

    (39) stmt -> block .

    ELSE            reduce using rule 39 (stmt -> block .)
    RETURN          reduce using rule 39 (stmt -> block .)
    IF              reduce using rule 39 (stmt -> block .)
    WHILE           reduce using rule 39 (stmt -> block .)
    BREAK           reduce using rule 39 (stmt -> block .)
    CONTINUE        reduce using rule 39 (stmt -> block .)
    LKEY            reduce using rule 39 (stmt -> block .)
    ID              reduce using rule 39 (stmt -> block .)
    THIS            reduce using rule 39 (stmt -> block .)
    NEW             reduce using rule 39 (stmt -> block .)
    UMINUS          reduce using rule 39 (stmt -> block .)
    NEGBOOL         reduce using rule 39 (stmt -> block .)
    LPAR            reduce using rule 39 (stmt -> block .)
    NUMERO          reduce using rule 39 (stmt -> block .)
    CAD             reduce using rule 39 (stmt -> block .)
    TRUE            reduce using rule 39 (stmt -> block .)
    FALSE           reduce using rule 39 (stmt -> block .)
    NULL            reduce using rule 39 (stmt -> block .)
    RKEY            reduce using rule 39 (stmt -> block .)



state 77

    (29) equalExprOp -> IGUAL . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 115
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 78

    (28) varDecl -> type ID equalExprOp . COMMA ID equalExprOp listIdEqExprOp DOTCOMMA

    COMMA           shift and go to state 116



state 79

    (30) equalExprOp -> empty .

    DOTCOMMA        reduce using rule 30 (equalExprOp -> empty .)
    COMMA           reduce using rule 30 (equalExprOp -> empty .)



state 80

    (16) listTypeId -> COMMA type . ID listTypeId
    (21) type -> type . ID
    (22) type -> type . LCOR RCOR

    ID              shift and go to state 117
    LCOR            shift and go to state 21



state 81

    (71) expr -> call .

    COMMA           reduce using rule 71 (expr -> call .)
    SUM             reduce using rule 71 (expr -> call .)
    MEN             reduce using rule 71 (expr -> call .)
    MULT            reduce using rule 71 (expr -> call .)
    DIV             reduce using rule 71 (expr -> call .)
    MOD             reduce using rule 71 (expr -> call .)
    ILOGICO         reduce using rule 71 (expr -> call .)
    OLOGICO         reduce using rule 71 (expr -> call .)
    MENORQUE        reduce using rule 71 (expr -> call .)
    MENORIGUAL      reduce using rule 71 (expr -> call .)
    MAYORQUE        reduce using rule 71 (expr -> call .)
    MAYORIGUAL      reduce using rule 71 (expr -> call .)
    IGUALIGUAL      reduce using rule 71 (expr -> call .)
    DIFERENTE       reduce using rule 71 (expr -> call .)
    DOT             reduce using rule 71 (expr -> call .)
    LCOR            reduce using rule 71 (expr -> call .)
    DOTCOMMA        reduce using rule 71 (expr -> call .)
    RPAR            reduce using rule 71 (expr -> call .)
    RCOR            reduce using rule 71 (expr -> call .)



state 82

    (57) expr -> location .

    COMMA           reduce using rule 57 (expr -> location .)
    SUM             reduce using rule 57 (expr -> location .)
    MEN             reduce using rule 57 (expr -> location .)
    MULT            reduce using rule 57 (expr -> location .)
    DIV             reduce using rule 57 (expr -> location .)
    MOD             reduce using rule 57 (expr -> location .)
    ILOGICO         reduce using rule 57 (expr -> location .)
    OLOGICO         reduce using rule 57 (expr -> location .)
    MENORQUE        reduce using rule 57 (expr -> location .)
    MENORIGUAL      reduce using rule 57 (expr -> location .)
    MAYORQUE        reduce using rule 57 (expr -> location .)
    MAYORIGUAL      reduce using rule 57 (expr -> location .)
    IGUALIGUAL      reduce using rule 57 (expr -> location .)
    DIFERENTE       reduce using rule 57 (expr -> location .)
    DOT             reduce using rule 57 (expr -> location .)
    LCOR            reduce using rule 57 (expr -> location .)
    DOTCOMMA        reduce using rule 57 (expr -> location .)
    RPAR            reduce using rule 57 (expr -> location .)
    RCOR            reduce using rule 57 (expr -> location .)



state 83

    (79) expr -> LPAR expr . RPAR
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    RPAR            shift and go to state 118
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 84

    (35) stmt -> RETURN exprOp . DOTCOMMA

    DOTCOMMA        shift and go to state 120



state 85

    (41) exprOp -> empty .

    DOTCOMMA        reduce using rule 41 (exprOp -> empty .)



state 86

    (40) exprOp -> expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    DOTCOMMA        reduce using rule 40 (exprOp -> expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 87

    (37) stmt -> WHILE LPAR . expr RPAR stmt
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 121
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 88

    (77) expr -> NEGBOOL expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 77 (expr -> NEGBOOL expr .)
    SUM             reduce using rule 77 (expr -> NEGBOOL expr .)
    MEN             reduce using rule 77 (expr -> NEGBOOL expr .)
    MULT            reduce using rule 77 (expr -> NEGBOOL expr .)
    DIV             reduce using rule 77 (expr -> NEGBOOL expr .)
    MOD             reduce using rule 77 (expr -> NEGBOOL expr .)
    ILOGICO         reduce using rule 77 (expr -> NEGBOOL expr .)
    OLOGICO         reduce using rule 77 (expr -> NEGBOOL expr .)
    MENORQUE        reduce using rule 77 (expr -> NEGBOOL expr .)
    MENORIGUAL      reduce using rule 77 (expr -> NEGBOOL expr .)
    MAYORQUE        reduce using rule 77 (expr -> NEGBOOL expr .)
    MAYORIGUAL      reduce using rule 77 (expr -> NEGBOOL expr .)
    IGUALIGUAL      reduce using rule 77 (expr -> NEGBOOL expr .)
    DIFERENTE       reduce using rule 77 (expr -> NEGBOOL expr .)
    DOTCOMMA        reduce using rule 77 (expr -> NEGBOOL expr .)
    RPAR            reduce using rule 77 (expr -> NEGBOOL expr .)
    RCOR            reduce using rule 77 (expr -> NEGBOOL expr .)
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! DOT             [ reduce using rule 77 (expr -> NEGBOOL expr .) ]
  ! LCOR            [ reduce using rule 77 (expr -> NEGBOOL expr .) ]
  ! SUM             [ shift and go to state 101 ]
  ! MEN             [ shift and go to state 102 ]
  ! MULT            [ shift and go to state 106 ]
  ! DIV             [ shift and go to state 111 ]
  ! MOD             [ shift and go to state 113 ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 89

    (74) expr -> NEW type . LCOR expr RCOR
    (21) type -> type . ID
    (22) type -> type . LCOR RCOR

    LCOR            shift and go to state 122
    ID              shift and go to state 123



state 90

    (73) expr -> NEW ID . LPAR RPAR

    LPAR            shift and go to state 124



state 91

    (34) stmt -> call DOTCOMMA .

    ELSE            reduce using rule 34 (stmt -> call DOTCOMMA .)
    RETURN          reduce using rule 34 (stmt -> call DOTCOMMA .)
    IF              reduce using rule 34 (stmt -> call DOTCOMMA .)
    WHILE           reduce using rule 34 (stmt -> call DOTCOMMA .)
    BREAK           reduce using rule 34 (stmt -> call DOTCOMMA .)
    CONTINUE        reduce using rule 34 (stmt -> call DOTCOMMA .)
    LKEY            reduce using rule 34 (stmt -> call DOTCOMMA .)
    ID              reduce using rule 34 (stmt -> call DOTCOMMA .)
    THIS            reduce using rule 34 (stmt -> call DOTCOMMA .)
    NEW             reduce using rule 34 (stmt -> call DOTCOMMA .)
    UMINUS          reduce using rule 34 (stmt -> call DOTCOMMA .)
    NEGBOOL         reduce using rule 34 (stmt -> call DOTCOMMA .)
    LPAR            reduce using rule 34 (stmt -> call DOTCOMMA .)
    NUMERO          reduce using rule 34 (stmt -> call DOTCOMMA .)
    CAD             reduce using rule 34 (stmt -> call DOTCOMMA .)
    TRUE            reduce using rule 34 (stmt -> call DOTCOMMA .)
    FALSE           reduce using rule 34 (stmt -> call DOTCOMMA .)
    NULL            reduce using rule 34 (stmt -> call DOTCOMMA .)
    RKEY            reduce using rule 34 (stmt -> call DOTCOMMA .)



state 92

    (46) assign -> location IGUAL . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 125
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 93

    (38) stmt -> breakOrContinue DOTCOMMA .

    ELSE            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    RETURN          reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    IF              reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    WHILE           reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    BREAK           reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    CONTINUE        reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    LKEY            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    ID              reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    THIS            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    NEW             reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    UMINUS          reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    NEGBOOL         reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    LPAR            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    NUMERO          reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    CAD             reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    TRUE            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    FALSE           reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    NULL            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)
    RKEY            reduce using rule 38 (stmt -> breakOrContinue DOTCOMMA .)



state 94

    (50) call -> method LPAR . actuals RPAR
    (53) actuals -> . expr COMMA expr listExpr
    (54) actuals -> . empty
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (85) empty -> .
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    RPAR            reduce using rule 85 (empty -> .)
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 128
    literal                        shift and go to state 58
    actuals                        shift and go to state 127
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63
    empty                          shift and go to state 126

state 95

    (23) block -> LKEY varDecl listVarDecl stmt listStmt . RKEY
    (26) listStmt -> listStmt . stmt
    (33) stmt -> . assign DOTCOMMA
    (34) stmt -> . call DOTCOMMA
    (35) stmt -> . RETURN exprOp DOTCOMMA
    (36) stmt -> . IF LPAR expr RPAR stmt elseStmtOp
    (37) stmt -> . WHILE LPAR expr RPAR stmt
    (38) stmt -> . breakOrContinue DOTCOMMA
    (39) stmt -> . block
    (46) assign -> . location IGUAL expr
    (50) call -> . method LPAR actuals RPAR
    (44) breakOrContinue -> . BREAK
    (45) breakOrContinue -> . CONTINUE
    (23) block -> . LKEY varDecl listVarDecl stmt listStmt RKEY
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (51) method -> . ID
    (52) method -> . expr DOT ID
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL

    RKEY            shift and go to state 129
    RETURN          shift and go to state 52
    IF              shift and go to state 68
    WHILE           shift and go to state 53
    BREAK           shift and go to state 72
    CONTINUE        shift and go to state 74
    LKEY            shift and go to state 36
    ID              shift and go to state 67
    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    breakOrContinue                shift and go to state 61
    expr                           shift and go to state 71
    literal                        shift and go to state 58
    stmt                           shift and go to state 130
    method                         shift and go to state 63
    call                           shift and go to state 59
    assign                         shift and go to state 75
    block                          shift and go to state 76
    location                       shift and go to state 60

state 96

    (27) listStmt -> empty .

    RKEY            reduce using rule 27 (listStmt -> empty .)
    RETURN          reduce using rule 27 (listStmt -> empty .)
    IF              reduce using rule 27 (listStmt -> empty .)
    WHILE           reduce using rule 27 (listStmt -> empty .)
    BREAK           reduce using rule 27 (listStmt -> empty .)
    CONTINUE        reduce using rule 27 (listStmt -> empty .)
    LKEY            reduce using rule 27 (listStmt -> empty .)
    ID              reduce using rule 27 (listStmt -> empty .)
    THIS            reduce using rule 27 (listStmt -> empty .)
    NEW             reduce using rule 27 (listStmt -> empty .)
    UMINUS          reduce using rule 27 (listStmt -> empty .)
    NEGBOOL         reduce using rule 27 (listStmt -> empty .)
    LPAR            reduce using rule 27 (listStmt -> empty .)
    NUMERO          reduce using rule 27 (listStmt -> empty .)
    CAD             reduce using rule 27 (listStmt -> empty .)
    TRUE            reduce using rule 27 (listStmt -> empty .)
    FALSE           reduce using rule 27 (listStmt -> empty .)
    NULL            reduce using rule 27 (listStmt -> empty .)



state 97

    (36) stmt -> IF LPAR . expr RPAR stmt elseStmtOp
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 131
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 98

    (76) expr -> UMINUS expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 76 (expr -> UMINUS expr .)
    DOTCOMMA        reduce using rule 76 (expr -> UMINUS expr .)
    RPAR            reduce using rule 76 (expr -> UMINUS expr .)
    RCOR            reduce using rule 76 (expr -> UMINUS expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MEN             [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MULT            [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! DIV             [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MOD             [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! ILOGICO         [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! OLOGICO         [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MENORQUE        [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MENORIGUAL      [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MAYORQUE        [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! MAYORIGUAL      [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! IGUALIGUAL      [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! DIFERENTE       [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! DOT             [ reduce using rule 76 (expr -> UMINUS expr .) ]
  ! LCOR            [ reduce using rule 76 (expr -> UMINUS expr .) ]


state 99

    (64) expr -> expr OLOGICO . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 132
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 100

    (63) expr -> expr ILOGICO . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 133
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 101

    (58) expr -> expr SUM . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 134
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 102

    (59) expr -> expr MEN . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 135
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 103

    (70) expr -> expr DIFERENTE . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 136
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 104

    (69) expr -> expr IGUALIGUAL . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 137
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 105

    (68) expr -> expr MAYORIGUAL . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 138
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 106

    (60) expr -> expr MULT . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 139
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 107

    (65) expr -> expr MENORQUE . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 140
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 108

    (67) expr -> expr MAYORQUE . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 141
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 109

    (49) location -> expr LCOR . expr RCOR
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 142
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 110

    (66) expr -> expr MENORIGUAL . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 143
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 111

    (61) expr -> expr DIV . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 144
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 112

    (48) location -> expr DOT . ID
    (52) method -> expr DOT . ID
    (75) expr -> expr DOT . LENGTH

    ID              shift and go to state 146
    LENGTH          shift and go to state 145



state 113

    (62) expr -> expr MOD . expr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 147
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 114

    (33) stmt -> assign DOTCOMMA .

    ELSE            reduce using rule 33 (stmt -> assign DOTCOMMA .)
    RETURN          reduce using rule 33 (stmt -> assign DOTCOMMA .)
    IF              reduce using rule 33 (stmt -> assign DOTCOMMA .)
    WHILE           reduce using rule 33 (stmt -> assign DOTCOMMA .)
    BREAK           reduce using rule 33 (stmt -> assign DOTCOMMA .)
    CONTINUE        reduce using rule 33 (stmt -> assign DOTCOMMA .)
    LKEY            reduce using rule 33 (stmt -> assign DOTCOMMA .)
    ID              reduce using rule 33 (stmt -> assign DOTCOMMA .)
    THIS            reduce using rule 33 (stmt -> assign DOTCOMMA .)
    NEW             reduce using rule 33 (stmt -> assign DOTCOMMA .)
    UMINUS          reduce using rule 33 (stmt -> assign DOTCOMMA .)
    NEGBOOL         reduce using rule 33 (stmt -> assign DOTCOMMA .)
    LPAR            reduce using rule 33 (stmt -> assign DOTCOMMA .)
    NUMERO          reduce using rule 33 (stmt -> assign DOTCOMMA .)
    CAD             reduce using rule 33 (stmt -> assign DOTCOMMA .)
    TRUE            reduce using rule 33 (stmt -> assign DOTCOMMA .)
    FALSE           reduce using rule 33 (stmt -> assign DOTCOMMA .)
    NULL            reduce using rule 33 (stmt -> assign DOTCOMMA .)
    RKEY            reduce using rule 33 (stmt -> assign DOTCOMMA .)



state 115

    (29) equalExprOp -> IGUAL expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    DOTCOMMA        reduce using rule 29 (equalExprOp -> IGUAL expr .)
    COMMA           reduce using rule 29 (equalExprOp -> IGUAL expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 116

    (28) varDecl -> type ID equalExprOp COMMA . ID equalExprOp listIdEqExprOp DOTCOMMA

    ID              shift and go to state 148



state 117

    (16) listTypeId -> COMMA type ID . listTypeId
    (21) type -> type ID .
    (16) listTypeId -> . COMMA type ID listTypeId
    (17) listTypeId -> . empty
    (85) empty -> .

    ID              reduce using rule 21 (type -> type ID .)
    LCOR            reduce using rule 21 (type -> type ID .)
    COMMA           shift and go to state 48
    RPAR            reduce using rule 85 (empty -> .)


    listTypeId                     shift and go to state 149
    empty                          shift and go to state 49

state 118

    (79) expr -> LPAR expr RPAR .

    COMMA           reduce using rule 79 (expr -> LPAR expr RPAR .)
    SUM             reduce using rule 79 (expr -> LPAR expr RPAR .)
    MEN             reduce using rule 79 (expr -> LPAR expr RPAR .)
    MULT            reduce using rule 79 (expr -> LPAR expr RPAR .)
    DIV             reduce using rule 79 (expr -> LPAR expr RPAR .)
    MOD             reduce using rule 79 (expr -> LPAR expr RPAR .)
    ILOGICO         reduce using rule 79 (expr -> LPAR expr RPAR .)
    OLOGICO         reduce using rule 79 (expr -> LPAR expr RPAR .)
    MENORQUE        reduce using rule 79 (expr -> LPAR expr RPAR .)
    MENORIGUAL      reduce using rule 79 (expr -> LPAR expr RPAR .)
    MAYORQUE        reduce using rule 79 (expr -> LPAR expr RPAR .)
    MAYORIGUAL      reduce using rule 79 (expr -> LPAR expr RPAR .)
    IGUALIGUAL      reduce using rule 79 (expr -> LPAR expr RPAR .)
    DIFERENTE       reduce using rule 79 (expr -> LPAR expr RPAR .)
    DOT             reduce using rule 79 (expr -> LPAR expr RPAR .)
    LCOR            reduce using rule 79 (expr -> LPAR expr RPAR .)
    DOTCOMMA        reduce using rule 79 (expr -> LPAR expr RPAR .)
    RPAR            reduce using rule 79 (expr -> LPAR expr RPAR .)
    RCOR            reduce using rule 79 (expr -> LPAR expr RPAR .)



state 119

    (75) expr -> expr DOT . LENGTH
    (48) location -> expr DOT . ID
    (52) method -> expr DOT . ID

    LENGTH          shift and go to state 145
    ID              shift and go to state 146



state 120

    (35) stmt -> RETURN exprOp DOTCOMMA .

    ELSE            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    RETURN          reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    IF              reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    WHILE           reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    BREAK           reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    CONTINUE        reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    LKEY            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    ID              reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    THIS            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    NEW             reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    UMINUS          reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    NEGBOOL         reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    LPAR            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    NUMERO          reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    CAD             reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    TRUE            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    FALSE           reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    NULL            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)
    RKEY            reduce using rule 35 (stmt -> RETURN exprOp DOTCOMMA .)



state 121

    (37) stmt -> WHILE LPAR expr . RPAR stmt
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    RPAR            shift and go to state 150
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 122

    (74) expr -> NEW type LCOR . expr RCOR
    (22) type -> type LCOR . RCOR
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    RCOR            shift and go to state 23
    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 151
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 123

    (21) type -> type ID .

    LCOR            reduce using rule 21 (type -> type ID .)
    ID              reduce using rule 21 (type -> type ID .)



state 124

    (73) expr -> NEW ID LPAR . RPAR

    RPAR            shift and go to state 152



state 125

    (46) assign -> location IGUAL expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    DOTCOMMA        reduce using rule 46 (assign -> location IGUAL expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 126

    (54) actuals -> empty .

    RPAR            reduce using rule 54 (actuals -> empty .)



state 127

    (50) call -> method LPAR actuals . RPAR

    RPAR            shift and go to state 153



state 128

    (53) actuals -> expr . COMMA expr listExpr
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           shift and go to state 154
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 129

    (23) block -> LKEY varDecl listVarDecl stmt listStmt RKEY .

    RKEY            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    RETURN          reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    IF              reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    WHILE           reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    BREAK           reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    CONTINUE        reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    LKEY            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    ID              reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    THIS            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    NEW             reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    UMINUS          reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    NEGBOOL         reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    LPAR            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    NUMERO          reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    CAD             reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    TRUE            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    FALSE           reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    NULL            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    ELSE            reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    INT             reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    BOOLEAN         reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)
    STRING          reduce using rule 23 (block -> LKEY varDecl listVarDecl stmt listStmt RKEY .)



state 130

    (26) listStmt -> listStmt stmt .

    RKEY            reduce using rule 26 (listStmt -> listStmt stmt .)
    RETURN          reduce using rule 26 (listStmt -> listStmt stmt .)
    IF              reduce using rule 26 (listStmt -> listStmt stmt .)
    WHILE           reduce using rule 26 (listStmt -> listStmt stmt .)
    BREAK           reduce using rule 26 (listStmt -> listStmt stmt .)
    CONTINUE        reduce using rule 26 (listStmt -> listStmt stmt .)
    LKEY            reduce using rule 26 (listStmt -> listStmt stmt .)
    ID              reduce using rule 26 (listStmt -> listStmt stmt .)
    THIS            reduce using rule 26 (listStmt -> listStmt stmt .)
    NEW             reduce using rule 26 (listStmt -> listStmt stmt .)
    UMINUS          reduce using rule 26 (listStmt -> listStmt stmt .)
    NEGBOOL         reduce using rule 26 (listStmt -> listStmt stmt .)
    LPAR            reduce using rule 26 (listStmt -> listStmt stmt .)
    NUMERO          reduce using rule 26 (listStmt -> listStmt stmt .)
    CAD             reduce using rule 26 (listStmt -> listStmt stmt .)
    TRUE            reduce using rule 26 (listStmt -> listStmt stmt .)
    FALSE           reduce using rule 26 (listStmt -> listStmt stmt .)
    NULL            reduce using rule 26 (listStmt -> listStmt stmt .)



state 131

    (36) stmt -> IF LPAR expr . RPAR stmt elseStmtOp
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    RPAR            shift and go to state 155
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 132

    (64) expr -> expr OLOGICO expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 64 (expr -> expr OLOGICO expr .)
    OLOGICO         reduce using rule 64 (expr -> expr OLOGICO expr .)
    DOTCOMMA        reduce using rule 64 (expr -> expr OLOGICO expr .)
    RPAR            reduce using rule 64 (expr -> expr OLOGICO expr .)
    RCOR            reduce using rule 64 (expr -> expr OLOGICO expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MEN             [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MULT            [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! DIV             [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MOD             [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! ILOGICO         [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MENORQUE        [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MENORIGUAL      [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MAYORQUE        [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! MAYORIGUAL      [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! IGUALIGUAL      [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! DIFERENTE       [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! DOT             [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! LCOR            [ reduce using rule 64 (expr -> expr OLOGICO expr .) ]
  ! OLOGICO         [ shift and go to state 99 ]


state 133

    (63) expr -> expr ILOGICO expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 63 (expr -> expr ILOGICO expr .)
    ILOGICO         reduce using rule 63 (expr -> expr ILOGICO expr .)
    OLOGICO         reduce using rule 63 (expr -> expr ILOGICO expr .)
    DOTCOMMA        reduce using rule 63 (expr -> expr ILOGICO expr .)
    RPAR            reduce using rule 63 (expr -> expr ILOGICO expr .)
    RCOR            reduce using rule 63 (expr -> expr ILOGICO expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MEN             [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MULT            [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! DIV             [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MOD             [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MENORQUE        [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MENORIGUAL      [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MAYORQUE        [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! MAYORIGUAL      [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! IGUALIGUAL      [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! DIFERENTE       [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! DOT             [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! LCOR            [ reduce using rule 63 (expr -> expr ILOGICO expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]


state 134

    (58) expr -> expr SUM expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 58 (expr -> expr SUM expr .)
    SUM             reduce using rule 58 (expr -> expr SUM expr .)
    MEN             reduce using rule 58 (expr -> expr SUM expr .)
    ILOGICO         reduce using rule 58 (expr -> expr SUM expr .)
    OLOGICO         reduce using rule 58 (expr -> expr SUM expr .)
    MENORQUE        reduce using rule 58 (expr -> expr SUM expr .)
    MENORIGUAL      reduce using rule 58 (expr -> expr SUM expr .)
    MAYORQUE        reduce using rule 58 (expr -> expr SUM expr .)
    MAYORIGUAL      reduce using rule 58 (expr -> expr SUM expr .)
    IGUALIGUAL      reduce using rule 58 (expr -> expr SUM expr .)
    DIFERENTE       reduce using rule 58 (expr -> expr SUM expr .)
    DOTCOMMA        reduce using rule 58 (expr -> expr SUM expr .)
    RPAR            reduce using rule 58 (expr -> expr SUM expr .)
    RCOR            reduce using rule 58 (expr -> expr SUM expr .)
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! MULT            [ reduce using rule 58 (expr -> expr SUM expr .) ]
  ! DIV             [ reduce using rule 58 (expr -> expr SUM expr .) ]
  ! MOD             [ reduce using rule 58 (expr -> expr SUM expr .) ]
  ! DOT             [ reduce using rule 58 (expr -> expr SUM expr .) ]
  ! LCOR            [ reduce using rule 58 (expr -> expr SUM expr .) ]
  ! SUM             [ shift and go to state 101 ]
  ! MEN             [ shift and go to state 102 ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 135

    (59) expr -> expr MEN expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 59 (expr -> expr MEN expr .)
    SUM             reduce using rule 59 (expr -> expr MEN expr .)
    MEN             reduce using rule 59 (expr -> expr MEN expr .)
    ILOGICO         reduce using rule 59 (expr -> expr MEN expr .)
    OLOGICO         reduce using rule 59 (expr -> expr MEN expr .)
    MENORQUE        reduce using rule 59 (expr -> expr MEN expr .)
    MENORIGUAL      reduce using rule 59 (expr -> expr MEN expr .)
    MAYORQUE        reduce using rule 59 (expr -> expr MEN expr .)
    MAYORIGUAL      reduce using rule 59 (expr -> expr MEN expr .)
    IGUALIGUAL      reduce using rule 59 (expr -> expr MEN expr .)
    DIFERENTE       reduce using rule 59 (expr -> expr MEN expr .)
    DOTCOMMA        reduce using rule 59 (expr -> expr MEN expr .)
    RPAR            reduce using rule 59 (expr -> expr MEN expr .)
    RCOR            reduce using rule 59 (expr -> expr MEN expr .)
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! MULT            [ reduce using rule 59 (expr -> expr MEN expr .) ]
  ! DIV             [ reduce using rule 59 (expr -> expr MEN expr .) ]
  ! MOD             [ reduce using rule 59 (expr -> expr MEN expr .) ]
  ! DOT             [ reduce using rule 59 (expr -> expr MEN expr .) ]
  ! LCOR            [ reduce using rule 59 (expr -> expr MEN expr .) ]
  ! SUM             [ shift and go to state 101 ]
  ! MEN             [ shift and go to state 102 ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 136

    (70) expr -> expr DIFERENTE expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 70 (expr -> expr DIFERENTE expr .)
    ILOGICO         reduce using rule 70 (expr -> expr DIFERENTE expr .)
    OLOGICO         reduce using rule 70 (expr -> expr DIFERENTE expr .)
    IGUALIGUAL      reduce using rule 70 (expr -> expr DIFERENTE expr .)
    DIFERENTE       reduce using rule 70 (expr -> expr DIFERENTE expr .)
    DOTCOMMA        reduce using rule 70 (expr -> expr DIFERENTE expr .)
    RPAR            reduce using rule 70 (expr -> expr DIFERENTE expr .)
    RCOR            reduce using rule 70 (expr -> expr DIFERENTE expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MEN             [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MULT            [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! DIV             [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MOD             [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MENORQUE        [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MENORIGUAL      [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MAYORQUE        [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! MAYORIGUAL      [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! DOT             [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! LCOR            [ reduce using rule 70 (expr -> expr DIFERENTE expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 137

    (69) expr -> expr IGUALIGUAL expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    ILOGICO         reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    OLOGICO         reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    IGUALIGUAL      reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    DIFERENTE       reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    DOTCOMMA        reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    RPAR            reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    RCOR            reduce using rule 69 (expr -> expr IGUALIGUAL expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MEN             [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MULT            [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! DIV             [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MOD             [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MENORQUE        [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MENORIGUAL      [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MAYORQUE        [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! MAYORIGUAL      [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! DOT             [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! LCOR            [ reduce using rule 69 (expr -> expr IGUALIGUAL expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 138

    (68) expr -> expr MAYORIGUAL expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    ILOGICO         reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    OLOGICO         reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    MENORQUE        reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    MENORIGUAL      reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    MAYORQUE        reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    MAYORIGUAL      reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    IGUALIGUAL      reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    DIFERENTE       reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    DOTCOMMA        reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    RPAR            reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    RCOR            reduce using rule 68 (expr -> expr MAYORIGUAL expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! MEN             [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! MULT            [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! DIV             [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! MOD             [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! DOT             [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! LCOR            [ reduce using rule 68 (expr -> expr MAYORIGUAL expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 139

    (60) expr -> expr MULT expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 60 (expr -> expr MULT expr .)
    SUM             reduce using rule 60 (expr -> expr MULT expr .)
    MEN             reduce using rule 60 (expr -> expr MULT expr .)
    MULT            reduce using rule 60 (expr -> expr MULT expr .)
    DIV             reduce using rule 60 (expr -> expr MULT expr .)
    MOD             reduce using rule 60 (expr -> expr MULT expr .)
    ILOGICO         reduce using rule 60 (expr -> expr MULT expr .)
    OLOGICO         reduce using rule 60 (expr -> expr MULT expr .)
    MENORQUE        reduce using rule 60 (expr -> expr MULT expr .)
    MENORIGUAL      reduce using rule 60 (expr -> expr MULT expr .)
    MAYORQUE        reduce using rule 60 (expr -> expr MULT expr .)
    MAYORIGUAL      reduce using rule 60 (expr -> expr MULT expr .)
    IGUALIGUAL      reduce using rule 60 (expr -> expr MULT expr .)
    DIFERENTE       reduce using rule 60 (expr -> expr MULT expr .)
    DOTCOMMA        reduce using rule 60 (expr -> expr MULT expr .)
    RPAR            reduce using rule 60 (expr -> expr MULT expr .)
    RCOR            reduce using rule 60 (expr -> expr MULT expr .)
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! DOT             [ reduce using rule 60 (expr -> expr MULT expr .) ]
  ! LCOR            [ reduce using rule 60 (expr -> expr MULT expr .) ]
  ! SUM             [ shift and go to state 101 ]
  ! MEN             [ shift and go to state 102 ]
  ! MULT            [ shift and go to state 106 ]
  ! DIV             [ shift and go to state 111 ]
  ! MOD             [ shift and go to state 113 ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 140

    (65) expr -> expr MENORQUE expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 65 (expr -> expr MENORQUE expr .)
    ILOGICO         reduce using rule 65 (expr -> expr MENORQUE expr .)
    OLOGICO         reduce using rule 65 (expr -> expr MENORQUE expr .)
    MENORQUE        reduce using rule 65 (expr -> expr MENORQUE expr .)
    MENORIGUAL      reduce using rule 65 (expr -> expr MENORQUE expr .)
    MAYORQUE        reduce using rule 65 (expr -> expr MENORQUE expr .)
    MAYORIGUAL      reduce using rule 65 (expr -> expr MENORQUE expr .)
    IGUALIGUAL      reduce using rule 65 (expr -> expr MENORQUE expr .)
    DIFERENTE       reduce using rule 65 (expr -> expr MENORQUE expr .)
    DOTCOMMA        reduce using rule 65 (expr -> expr MENORQUE expr .)
    RPAR            reduce using rule 65 (expr -> expr MENORQUE expr .)
    RCOR            reduce using rule 65 (expr -> expr MENORQUE expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! MEN             [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! MULT            [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! DIV             [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! MOD             [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! DOT             [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! LCOR            [ reduce using rule 65 (expr -> expr MENORQUE expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 141

    (67) expr -> expr MAYORQUE expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 67 (expr -> expr MAYORQUE expr .)
    ILOGICO         reduce using rule 67 (expr -> expr MAYORQUE expr .)
    OLOGICO         reduce using rule 67 (expr -> expr MAYORQUE expr .)
    MENORQUE        reduce using rule 67 (expr -> expr MAYORQUE expr .)
    MENORIGUAL      reduce using rule 67 (expr -> expr MAYORQUE expr .)
    MAYORQUE        reduce using rule 67 (expr -> expr MAYORQUE expr .)
    MAYORIGUAL      reduce using rule 67 (expr -> expr MAYORQUE expr .)
    IGUALIGUAL      reduce using rule 67 (expr -> expr MAYORQUE expr .)
    DIFERENTE       reduce using rule 67 (expr -> expr MAYORQUE expr .)
    DOTCOMMA        reduce using rule 67 (expr -> expr MAYORQUE expr .)
    RPAR            reduce using rule 67 (expr -> expr MAYORQUE expr .)
    RCOR            reduce using rule 67 (expr -> expr MAYORQUE expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! MEN             [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! MULT            [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! DIV             [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! MOD             [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! DOT             [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! LCOR            [ reduce using rule 67 (expr -> expr MAYORQUE expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 142

    (49) location -> expr LCOR expr . RCOR
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    RCOR            shift and go to state 156
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 143

    (66) expr -> expr MENORIGUAL expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    ILOGICO         reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    OLOGICO         reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    MENORQUE        reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    MENORIGUAL      reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    MAYORQUE        reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    MAYORIGUAL      reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    IGUALIGUAL      reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    DIFERENTE       reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    DOTCOMMA        reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    RPAR            reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    RCOR            reduce using rule 66 (expr -> expr MENORIGUAL expr .)
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! SUM             [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! MEN             [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! MULT            [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! DIV             [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! MOD             [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! DOT             [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! LCOR            [ reduce using rule 66 (expr -> expr MENORIGUAL expr .) ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 144

    (61) expr -> expr DIV expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 61 (expr -> expr DIV expr .)
    SUM             reduce using rule 61 (expr -> expr DIV expr .)
    MEN             reduce using rule 61 (expr -> expr DIV expr .)
    MULT            reduce using rule 61 (expr -> expr DIV expr .)
    DIV             reduce using rule 61 (expr -> expr DIV expr .)
    MOD             reduce using rule 61 (expr -> expr DIV expr .)
    ILOGICO         reduce using rule 61 (expr -> expr DIV expr .)
    OLOGICO         reduce using rule 61 (expr -> expr DIV expr .)
    MENORQUE        reduce using rule 61 (expr -> expr DIV expr .)
    MENORIGUAL      reduce using rule 61 (expr -> expr DIV expr .)
    MAYORQUE        reduce using rule 61 (expr -> expr DIV expr .)
    MAYORIGUAL      reduce using rule 61 (expr -> expr DIV expr .)
    IGUALIGUAL      reduce using rule 61 (expr -> expr DIV expr .)
    DIFERENTE       reduce using rule 61 (expr -> expr DIV expr .)
    DOTCOMMA        reduce using rule 61 (expr -> expr DIV expr .)
    RPAR            reduce using rule 61 (expr -> expr DIV expr .)
    RCOR            reduce using rule 61 (expr -> expr DIV expr .)
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! DOT             [ reduce using rule 61 (expr -> expr DIV expr .) ]
  ! LCOR            [ reduce using rule 61 (expr -> expr DIV expr .) ]
  ! SUM             [ shift and go to state 101 ]
  ! MEN             [ shift and go to state 102 ]
  ! MULT            [ shift and go to state 106 ]
  ! DIV             [ shift and go to state 111 ]
  ! MOD             [ shift and go to state 113 ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 145

    (75) expr -> expr DOT LENGTH .

    COMMA           reduce using rule 75 (expr -> expr DOT LENGTH .)
    SUM             reduce using rule 75 (expr -> expr DOT LENGTH .)
    MEN             reduce using rule 75 (expr -> expr DOT LENGTH .)
    MULT            reduce using rule 75 (expr -> expr DOT LENGTH .)
    DIV             reduce using rule 75 (expr -> expr DOT LENGTH .)
    MOD             reduce using rule 75 (expr -> expr DOT LENGTH .)
    ILOGICO         reduce using rule 75 (expr -> expr DOT LENGTH .)
    OLOGICO         reduce using rule 75 (expr -> expr DOT LENGTH .)
    MENORQUE        reduce using rule 75 (expr -> expr DOT LENGTH .)
    MENORIGUAL      reduce using rule 75 (expr -> expr DOT LENGTH .)
    MAYORQUE        reduce using rule 75 (expr -> expr DOT LENGTH .)
    MAYORIGUAL      reduce using rule 75 (expr -> expr DOT LENGTH .)
    IGUALIGUAL      reduce using rule 75 (expr -> expr DOT LENGTH .)
    DIFERENTE       reduce using rule 75 (expr -> expr DOT LENGTH .)
    DOT             reduce using rule 75 (expr -> expr DOT LENGTH .)
    LCOR            reduce using rule 75 (expr -> expr DOT LENGTH .)
    DOTCOMMA        reduce using rule 75 (expr -> expr DOT LENGTH .)
    RPAR            reduce using rule 75 (expr -> expr DOT LENGTH .)
    RCOR            reduce using rule 75 (expr -> expr DOT LENGTH .)



state 146

    (48) location -> expr DOT ID .
    (52) method -> expr DOT ID .

    COMMA           reduce using rule 48 (location -> expr DOT ID .)
    SUM             reduce using rule 48 (location -> expr DOT ID .)
    MEN             reduce using rule 48 (location -> expr DOT ID .)
    MULT            reduce using rule 48 (location -> expr DOT ID .)
    DIV             reduce using rule 48 (location -> expr DOT ID .)
    MOD             reduce using rule 48 (location -> expr DOT ID .)
    ILOGICO         reduce using rule 48 (location -> expr DOT ID .)
    OLOGICO         reduce using rule 48 (location -> expr DOT ID .)
    MENORQUE        reduce using rule 48 (location -> expr DOT ID .)
    MENORIGUAL      reduce using rule 48 (location -> expr DOT ID .)
    MAYORQUE        reduce using rule 48 (location -> expr DOT ID .)
    MAYORIGUAL      reduce using rule 48 (location -> expr DOT ID .)
    IGUALIGUAL      reduce using rule 48 (location -> expr DOT ID .)
    DIFERENTE       reduce using rule 48 (location -> expr DOT ID .)
    DOT             reduce using rule 48 (location -> expr DOT ID .)
    LCOR            reduce using rule 48 (location -> expr DOT ID .)
    RPAR            reduce using rule 48 (location -> expr DOT ID .)
    DOTCOMMA        reduce using rule 48 (location -> expr DOT ID .)
    RCOR            reduce using rule 48 (location -> expr DOT ID .)
    IGUAL           reduce using rule 48 (location -> expr DOT ID .)
    LPAR            reduce using rule 52 (method -> expr DOT ID .)



state 147

    (62) expr -> expr MOD expr .
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    COMMA           reduce using rule 62 (expr -> expr MOD expr .)
    SUM             reduce using rule 62 (expr -> expr MOD expr .)
    MEN             reduce using rule 62 (expr -> expr MOD expr .)
    MULT            reduce using rule 62 (expr -> expr MOD expr .)
    DIV             reduce using rule 62 (expr -> expr MOD expr .)
    MOD             reduce using rule 62 (expr -> expr MOD expr .)
    ILOGICO         reduce using rule 62 (expr -> expr MOD expr .)
    OLOGICO         reduce using rule 62 (expr -> expr MOD expr .)
    MENORQUE        reduce using rule 62 (expr -> expr MOD expr .)
    MENORIGUAL      reduce using rule 62 (expr -> expr MOD expr .)
    MAYORQUE        reduce using rule 62 (expr -> expr MOD expr .)
    MAYORIGUAL      reduce using rule 62 (expr -> expr MOD expr .)
    IGUALIGUAL      reduce using rule 62 (expr -> expr MOD expr .)
    DIFERENTE       reduce using rule 62 (expr -> expr MOD expr .)
    DOTCOMMA        reduce using rule 62 (expr -> expr MOD expr .)
    RPAR            reduce using rule 62 (expr -> expr MOD expr .)
    RCOR            reduce using rule 62 (expr -> expr MOD expr .)
    DOT             shift and go to state 119
    LCOR            shift and go to state 109

  ! DOT             [ reduce using rule 62 (expr -> expr MOD expr .) ]
  ! LCOR            [ reduce using rule 62 (expr -> expr MOD expr .) ]
  ! SUM             [ shift and go to state 101 ]
  ! MEN             [ shift and go to state 102 ]
  ! MULT            [ shift and go to state 106 ]
  ! DIV             [ shift and go to state 111 ]
  ! MOD             [ shift and go to state 113 ]
  ! ILOGICO         [ shift and go to state 100 ]
  ! OLOGICO         [ shift and go to state 99 ]
  ! MENORQUE        [ shift and go to state 107 ]
  ! MENORIGUAL      [ shift and go to state 110 ]
  ! MAYORQUE        [ shift and go to state 108 ]
  ! MAYORIGUAL      [ shift and go to state 105 ]
  ! IGUALIGUAL      [ shift and go to state 104 ]
  ! DIFERENTE       [ shift and go to state 103 ]


state 148

    (28) varDecl -> type ID equalExprOp COMMA ID . equalExprOp listIdEqExprOp DOTCOMMA
    (29) equalExprOp -> . IGUAL expr
    (30) equalExprOp -> . empty
    (85) empty -> .

    IGUAL           shift and go to state 77
    DOTCOMMA        reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)


    equalExprOp                    shift and go to state 157
    empty                          shift and go to state 79

state 149

    (16) listTypeId -> COMMA type ID listTypeId .

    RPAR            reduce using rule 16 (listTypeId -> COMMA type ID listTypeId .)



state 150

    (37) stmt -> WHILE LPAR expr RPAR . stmt
    (33) stmt -> . assign DOTCOMMA
    (34) stmt -> . call DOTCOMMA
    (35) stmt -> . RETURN exprOp DOTCOMMA
    (36) stmt -> . IF LPAR expr RPAR stmt elseStmtOp
    (37) stmt -> . WHILE LPAR expr RPAR stmt
    (38) stmt -> . breakOrContinue DOTCOMMA
    (39) stmt -> . block
    (46) assign -> . location IGUAL expr
    (50) call -> . method LPAR actuals RPAR
    (44) breakOrContinue -> . BREAK
    (45) breakOrContinue -> . CONTINUE
    (23) block -> . LKEY varDecl listVarDecl stmt listStmt RKEY
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (51) method -> . ID
    (52) method -> . expr DOT ID
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL

    RETURN          shift and go to state 52
    IF              shift and go to state 68
    WHILE           shift and go to state 53
    BREAK           shift and go to state 72
    CONTINUE        shift and go to state 74
    LKEY            shift and go to state 36
    ID              shift and go to state 67
    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 71
    literal                        shift and go to state 58
    method                         shift and go to state 63
    call                           shift and go to state 59
    stmt                           shift and go to state 158
    breakOrContinue                shift and go to state 61
    assign                         shift and go to state 75
    block                          shift and go to state 76
    location                       shift and go to state 60

state 151

    (74) expr -> NEW type LCOR expr . RCOR
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID

    RCOR            shift and go to state 159
    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109



state 152

    (73) expr -> NEW ID LPAR RPAR .

    COMMA           reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    SUM             reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MEN             reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MULT            reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    DIV             reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MOD             reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    ILOGICO         reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    OLOGICO         reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MENORQUE        reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MENORIGUAL      reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MAYORQUE        reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    MAYORIGUAL      reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    IGUALIGUAL      reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    DIFERENTE       reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    DOT             reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    LCOR            reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    DOTCOMMA        reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    RPAR            reduce using rule 73 (expr -> NEW ID LPAR RPAR .)
    RCOR            reduce using rule 73 (expr -> NEW ID LPAR RPAR .)



state 153

    (50) call -> method LPAR actuals RPAR .

    DOTCOMMA        reduce using rule 50 (call -> method LPAR actuals RPAR .)
    DOT             reduce using rule 50 (call -> method LPAR actuals RPAR .)
    LCOR            reduce using rule 50 (call -> method LPAR actuals RPAR .)
    SUM             reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MEN             reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MULT            reduce using rule 50 (call -> method LPAR actuals RPAR .)
    DIV             reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MOD             reduce using rule 50 (call -> method LPAR actuals RPAR .)
    ILOGICO         reduce using rule 50 (call -> method LPAR actuals RPAR .)
    OLOGICO         reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MENORQUE        reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MENORIGUAL      reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MAYORQUE        reduce using rule 50 (call -> method LPAR actuals RPAR .)
    MAYORIGUAL      reduce using rule 50 (call -> method LPAR actuals RPAR .)
    IGUALIGUAL      reduce using rule 50 (call -> method LPAR actuals RPAR .)
    DIFERENTE       reduce using rule 50 (call -> method LPAR actuals RPAR .)
    COMMA           reduce using rule 50 (call -> method LPAR actuals RPAR .)
    RPAR            reduce using rule 50 (call -> method LPAR actuals RPAR .)
    RCOR            reduce using rule 50 (call -> method LPAR actuals RPAR .)



state 154

    (53) actuals -> expr COMMA . expr listExpr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 160
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 155

    (36) stmt -> IF LPAR expr RPAR . stmt elseStmtOp
    (33) stmt -> . assign DOTCOMMA
    (34) stmt -> . call DOTCOMMA
    (35) stmt -> . RETURN exprOp DOTCOMMA
    (36) stmt -> . IF LPAR expr RPAR stmt elseStmtOp
    (37) stmt -> . WHILE LPAR expr RPAR stmt
    (38) stmt -> . breakOrContinue DOTCOMMA
    (39) stmt -> . block
    (46) assign -> . location IGUAL expr
    (50) call -> . method LPAR actuals RPAR
    (44) breakOrContinue -> . BREAK
    (45) breakOrContinue -> . CONTINUE
    (23) block -> . LKEY varDecl listVarDecl stmt listStmt RKEY
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (51) method -> . ID
    (52) method -> . expr DOT ID
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL

    RETURN          shift and go to state 52
    IF              shift and go to state 68
    WHILE           shift and go to state 53
    BREAK           shift and go to state 72
    CONTINUE        shift and go to state 74
    LKEY            shift and go to state 36
    ID              shift and go to state 67
    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 71
    literal                        shift and go to state 58
    method                         shift and go to state 63
    call                           shift and go to state 59
    stmt                           shift and go to state 161
    breakOrContinue                shift and go to state 61
    assign                         shift and go to state 75
    block                          shift and go to state 76
    location                       shift and go to state 60

state 156

    (49) location -> expr LCOR expr RCOR .

    COMMA           reduce using rule 49 (location -> expr LCOR expr RCOR .)
    SUM             reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MEN             reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MULT            reduce using rule 49 (location -> expr LCOR expr RCOR .)
    DIV             reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MOD             reduce using rule 49 (location -> expr LCOR expr RCOR .)
    ILOGICO         reduce using rule 49 (location -> expr LCOR expr RCOR .)
    OLOGICO         reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MENORQUE        reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MENORIGUAL      reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MAYORQUE        reduce using rule 49 (location -> expr LCOR expr RCOR .)
    MAYORIGUAL      reduce using rule 49 (location -> expr LCOR expr RCOR .)
    IGUALIGUAL      reduce using rule 49 (location -> expr LCOR expr RCOR .)
    DIFERENTE       reduce using rule 49 (location -> expr LCOR expr RCOR .)
    DOT             reduce using rule 49 (location -> expr LCOR expr RCOR .)
    LCOR            reduce using rule 49 (location -> expr LCOR expr RCOR .)
    RPAR            reduce using rule 49 (location -> expr LCOR expr RCOR .)
    DOTCOMMA        reduce using rule 49 (location -> expr LCOR expr RCOR .)
    RCOR            reduce using rule 49 (location -> expr LCOR expr RCOR .)
    IGUAL           reduce using rule 49 (location -> expr LCOR expr RCOR .)



state 157

    (28) varDecl -> type ID equalExprOp COMMA ID equalExprOp . listIdEqExprOp DOTCOMMA
    (31) listIdEqExprOp -> . listIdEqExprOp COMMA ID equalExprOp
    (32) listIdEqExprOp -> . empty
    (85) empty -> .

    DOTCOMMA        reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)


    empty                          shift and go to state 163
    listIdEqExprOp                 shift and go to state 162

state 158

    (37) stmt -> WHILE LPAR expr RPAR stmt .

    ELSE            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    RETURN          reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    IF              reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    WHILE           reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    BREAK           reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    CONTINUE        reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    LKEY            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    ID              reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    THIS            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    NEW             reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    UMINUS          reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    NEGBOOL         reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    LPAR            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    NUMERO          reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    CAD             reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    TRUE            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    FALSE           reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    NULL            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)
    RKEY            reduce using rule 37 (stmt -> WHILE LPAR expr RPAR stmt .)



state 159

    (74) expr -> NEW type LCOR expr RCOR .

    COMMA           reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    SUM             reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MEN             reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MULT            reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    DIV             reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MOD             reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    ILOGICO         reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    OLOGICO         reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MENORQUE        reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MENORIGUAL      reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MAYORQUE        reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    MAYORIGUAL      reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    IGUALIGUAL      reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    DIFERENTE       reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    DOT             reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    LCOR            reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    DOTCOMMA        reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    RPAR            reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)
    RCOR            reduce using rule 74 (expr -> NEW type LCOR expr RCOR .)



state 160

    (53) actuals -> expr COMMA expr . listExpr
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID
    (55) listExpr -> . COMMA expr listExpr
    (56) listExpr -> . empty
    (85) empty -> .

    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109
    COMMA           shift and go to state 165
    RPAR            reduce using rule 85 (empty -> .)


    listExpr                       shift and go to state 164
    empty                          shift and go to state 166

state 161

    (36) stmt -> IF LPAR expr RPAR stmt . elseStmtOp
    (42) elseStmtOp -> . ELSE
    (43) elseStmtOp -> . stmt
    (33) stmt -> . assign DOTCOMMA
    (34) stmt -> . call DOTCOMMA
    (35) stmt -> . RETURN exprOp DOTCOMMA
    (36) stmt -> . IF LPAR expr RPAR stmt elseStmtOp
    (37) stmt -> . WHILE LPAR expr RPAR stmt
    (38) stmt -> . breakOrContinue DOTCOMMA
    (39) stmt -> . block
    (46) assign -> . location IGUAL expr
    (50) call -> . method LPAR actuals RPAR
    (44) breakOrContinue -> . BREAK
    (45) breakOrContinue -> . CONTINUE
    (23) block -> . LKEY varDecl listVarDecl stmt listStmt RKEY
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (51) method -> . ID
    (52) method -> . expr DOT ID
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL

    ELSE            shift and go to state 168
    RETURN          shift and go to state 52
    IF              shift and go to state 68
    WHILE           shift and go to state 53
    BREAK           shift and go to state 72
    CONTINUE        shift and go to state 74
    LKEY            shift and go to state 36
    ID              shift and go to state 67
    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 71
    elseStmtOp                     shift and go to state 169
    literal                        shift and go to state 58
    method                         shift and go to state 63
    call                           shift and go to state 59
    stmt                           shift and go to state 167
    breakOrContinue                shift and go to state 61
    assign                         shift and go to state 75
    block                          shift and go to state 76
    location                       shift and go to state 60

state 162

    (28) varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp . DOTCOMMA
    (31) listIdEqExprOp -> listIdEqExprOp . COMMA ID equalExprOp

    DOTCOMMA        shift and go to state 171
    COMMA           shift and go to state 170



state 163

    (32) listIdEqExprOp -> empty .

    DOTCOMMA        reduce using rule 32 (listIdEqExprOp -> empty .)
    COMMA           reduce using rule 32 (listIdEqExprOp -> empty .)



state 164

    (53) actuals -> expr COMMA expr listExpr .

    RPAR            reduce using rule 53 (actuals -> expr COMMA expr listExpr .)



state 165

    (55) listExpr -> COMMA . expr listExpr
    (57) expr -> . location
    (58) expr -> . expr SUM expr
    (59) expr -> . expr MEN expr
    (60) expr -> . expr MULT expr
    (61) expr -> . expr DIV expr
    (62) expr -> . expr MOD expr
    (63) expr -> . expr ILOGICO expr
    (64) expr -> . expr OLOGICO expr
    (65) expr -> . expr MENORQUE expr
    (66) expr -> . expr MENORIGUAL expr
    (67) expr -> . expr MAYORQUE expr
    (68) expr -> . expr MAYORIGUAL expr
    (69) expr -> . expr IGUALIGUAL expr
    (70) expr -> . expr DIFERENTE expr
    (71) expr -> . call
    (72) expr -> . THIS
    (73) expr -> . NEW ID LPAR RPAR
    (74) expr -> . NEW type LCOR expr RCOR
    (75) expr -> . expr DOT LENGTH
    (76) expr -> . UMINUS expr
    (77) expr -> . NEGBOOL expr
    (78) expr -> . literal
    (79) expr -> . LPAR expr RPAR
    (47) location -> . ID
    (48) location -> . expr DOT ID
    (49) location -> . expr LCOR expr RCOR
    (50) call -> . method LPAR actuals RPAR
    (80) literal -> . NUMERO
    (81) literal -> . CAD
    (82) literal -> . TRUE
    (83) literal -> . FALSE
    (84) literal -> . NULL
    (51) method -> . ID
    (52) method -> . expr DOT ID

    THIS            shift and go to state 73
    NEW             shift and go to state 55
    UMINUS          shift and go to state 70
    NEGBOOL         shift and go to state 54
    LPAR            shift and go to state 51
    ID              shift and go to state 67
    NUMERO          shift and go to state 66
    CAD             shift and go to state 62
    TRUE            shift and go to state 57
    FALSE           shift and go to state 69
    NULL            shift and go to state 56


    expr                           shift and go to state 172
    literal                        shift and go to state 58
    call                           shift and go to state 81
    location                       shift and go to state 82
    method                         shift and go to state 63

state 166

    (56) listExpr -> empty .

    RPAR            reduce using rule 56 (listExpr -> empty .)



state 167

    (43) elseStmtOp -> stmt .

    RKEY            reduce using rule 43 (elseStmtOp -> stmt .)
    RETURN          reduce using rule 43 (elseStmtOp -> stmt .)
    IF              reduce using rule 43 (elseStmtOp -> stmt .)
    WHILE           reduce using rule 43 (elseStmtOp -> stmt .)
    BREAK           reduce using rule 43 (elseStmtOp -> stmt .)
    CONTINUE        reduce using rule 43 (elseStmtOp -> stmt .)
    LKEY            reduce using rule 43 (elseStmtOp -> stmt .)
    ID              reduce using rule 43 (elseStmtOp -> stmt .)
    THIS            reduce using rule 43 (elseStmtOp -> stmt .)
    NEW             reduce using rule 43 (elseStmtOp -> stmt .)
    UMINUS          reduce using rule 43 (elseStmtOp -> stmt .)
    NEGBOOL         reduce using rule 43 (elseStmtOp -> stmt .)
    LPAR            reduce using rule 43 (elseStmtOp -> stmt .)
    NUMERO          reduce using rule 43 (elseStmtOp -> stmt .)
    CAD             reduce using rule 43 (elseStmtOp -> stmt .)
    TRUE            reduce using rule 43 (elseStmtOp -> stmt .)
    FALSE           reduce using rule 43 (elseStmtOp -> stmt .)
    NULL            reduce using rule 43 (elseStmtOp -> stmt .)
    ELSE            reduce using rule 43 (elseStmtOp -> stmt .)



state 168

    (42) elseStmtOp -> ELSE .

    RKEY            reduce using rule 42 (elseStmtOp -> ELSE .)
    RETURN          reduce using rule 42 (elseStmtOp -> ELSE .)
    IF              reduce using rule 42 (elseStmtOp -> ELSE .)
    WHILE           reduce using rule 42 (elseStmtOp -> ELSE .)
    BREAK           reduce using rule 42 (elseStmtOp -> ELSE .)
    CONTINUE        reduce using rule 42 (elseStmtOp -> ELSE .)
    LKEY            reduce using rule 42 (elseStmtOp -> ELSE .)
    ID              reduce using rule 42 (elseStmtOp -> ELSE .)
    THIS            reduce using rule 42 (elseStmtOp -> ELSE .)
    NEW             reduce using rule 42 (elseStmtOp -> ELSE .)
    UMINUS          reduce using rule 42 (elseStmtOp -> ELSE .)
    NEGBOOL         reduce using rule 42 (elseStmtOp -> ELSE .)
    LPAR            reduce using rule 42 (elseStmtOp -> ELSE .)
    NUMERO          reduce using rule 42 (elseStmtOp -> ELSE .)
    CAD             reduce using rule 42 (elseStmtOp -> ELSE .)
    TRUE            reduce using rule 42 (elseStmtOp -> ELSE .)
    FALSE           reduce using rule 42 (elseStmtOp -> ELSE .)
    NULL            reduce using rule 42 (elseStmtOp -> ELSE .)
    ELSE            reduce using rule 42 (elseStmtOp -> ELSE .)



state 169

    (36) stmt -> IF LPAR expr RPAR stmt elseStmtOp .

    ELSE            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    RETURN          reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    IF              reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    WHILE           reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    BREAK           reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    CONTINUE        reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    LKEY            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    ID              reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    THIS            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    NEW             reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    UMINUS          reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    NEGBOOL         reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    LPAR            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    NUMERO          reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    CAD             reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    TRUE            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    FALSE           reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    NULL            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)
    RKEY            reduce using rule 36 (stmt -> IF LPAR expr RPAR stmt elseStmtOp .)



state 170

    (31) listIdEqExprOp -> listIdEqExprOp COMMA . ID equalExprOp

    ID              shift and go to state 173



state 171

    (28) varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .

    RETURN          reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    IF              reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    WHILE           reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    BREAK           reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    CONTINUE        reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    LKEY            reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    INT             reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    BOOLEAN         reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    STRING          reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    ID              reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    THIS            reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    NEW             reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    UMINUS          reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    NEGBOOL         reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    LPAR            reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    NUMERO          reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    CAD             reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    TRUE            reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    FALSE           reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)
    NULL            reduce using rule 28 (varDecl -> type ID equalExprOp COMMA ID equalExprOp listIdEqExprOp DOTCOMMA .)



state 172

    (55) listExpr -> COMMA expr . listExpr
    (58) expr -> expr . SUM expr
    (59) expr -> expr . MEN expr
    (60) expr -> expr . MULT expr
    (61) expr -> expr . DIV expr
    (62) expr -> expr . MOD expr
    (63) expr -> expr . ILOGICO expr
    (64) expr -> expr . OLOGICO expr
    (65) expr -> expr . MENORQUE expr
    (66) expr -> expr . MENORIGUAL expr
    (67) expr -> expr . MAYORQUE expr
    (68) expr -> expr . MAYORIGUAL expr
    (69) expr -> expr . IGUALIGUAL expr
    (70) expr -> expr . DIFERENTE expr
    (75) expr -> expr . DOT LENGTH
    (48) location -> expr . DOT ID
    (49) location -> expr . LCOR expr RCOR
    (52) method -> expr . DOT ID
    (55) listExpr -> . COMMA expr listExpr
    (56) listExpr -> . empty
    (85) empty -> .

    SUM             shift and go to state 101
    MEN             shift and go to state 102
    MULT            shift and go to state 106
    DIV             shift and go to state 111
    MOD             shift and go to state 113
    ILOGICO         shift and go to state 100
    OLOGICO         shift and go to state 99
    MENORQUE        shift and go to state 107
    MENORIGUAL      shift and go to state 110
    MAYORQUE        shift and go to state 108
    MAYORIGUAL      shift and go to state 105
    IGUALIGUAL      shift and go to state 104
    DIFERENTE       shift and go to state 103
    DOT             shift and go to state 119
    LCOR            shift and go to state 109
    COMMA           shift and go to state 165
    RPAR            reduce using rule 85 (empty -> .)


    listExpr                       shift and go to state 174
    empty                          shift and go to state 166

state 173

    (31) listIdEqExprOp -> listIdEqExprOp COMMA ID . equalExprOp
    (29) equalExprOp -> . IGUAL expr
    (30) equalExprOp -> . empty
    (85) empty -> .

    IGUAL           shift and go to state 77
    DOTCOMMA        reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)


    equalExprOp                    shift and go to state 175
    empty                          shift and go to state 79

state 174

    (55) listExpr -> COMMA expr listExpr .

    RPAR            reduce using rule 55 (listExpr -> COMMA expr listExpr .)



state 175

    (31) listIdEqExprOp -> listIdEqExprOp COMMA ID equalExprOp .

    DOTCOMMA        reduce using rule 31 (listIdEqExprOp -> listIdEqExprOp COMMA ID equalExprOp .)
    COMMA           reduce using rule 31 (listIdEqExprOp -> listIdEqExprOp COMMA ID equalExprOp .)


